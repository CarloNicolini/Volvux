/*
const vec3 X = vec3(1.0,0.0,0.0);
const vec3 Y = vec3(0.0,1.0,0.0);
const vec3 Z = vec3(0.0,0.0,1.0);
varying vec3 texture_coordinate;
uniform sampler3D my_color_texture;
uniform vec4 uniformColor;
void main()
{
    vec4 uniformColor = vec4(1.0,1.0,1.0,1.0);
    vec4 finalColor;
    //finalColor = (texture3D(my_color_texture, texture_coordinate+X)+texture3D(my_color_texture-X, texture_coordinate))*0.5
    //        +(texture3D(my_color_texture, texture_coordinate+Y)+texture3D(my_color_texture-Y, texture_coordinate))*0.5
    //        +(texture3D(my_color_texture, texture_coordinate+Z)+texture3D(my_color_texture-Z, texture_coordinate))*0.5;
    if ( texture_coordinate.x <=0.0 || texture_coordinate.x >= 1.0 || texture_coordinate.z <= 0.0 || texture_coordinate.z >= 1.0 )
        gl_FragColor =vec4(0.0,0.0,0.0,1.0); //Can be uniformColor to color again the thing
    else
        gl_FragColor = uniformColor*texture3D(my_color_texture, texture_coordinate);
}
*/
const char src_Texture3DShader_frag[] = {
  0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x58,
  0x20, 0x3d, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x31, 0x2e, 0x30, 0x2c,
  0x30, 0x2e, 0x30, 0x2c, 0x30, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x63, 0x6f,
  0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x59, 0x20, 0x3d,
  0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x31, 0x2e,
  0x30, 0x2c, 0x30, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73,
  0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5a, 0x20, 0x3d, 0x20, 0x76,
  0x65, 0x63, 0x33, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x30, 0x2e, 0x30, 0x2c,
  0x31, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x76, 0x61, 0x72, 0x79, 0x69, 0x6e,
  0x67, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75,
  0x72, 0x65, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74,
  0x65, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x73,
  0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x33, 0x44, 0x20, 0x6d, 0x79, 0x5f,
  0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72,
  0x65, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76,
  0x65, 0x63, 0x34, 0x20, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x43,
  0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x6d,
  0x61, 0x69, 0x6e, 0x28, 0x29, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20,
  0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d,
  0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x76, 0x65, 0x63, 0x34,
  0x28, 0x31, 0x2e, 0x30, 0x2c, 0x31, 0x2e, 0x30, 0x2c, 0x31, 0x2e, 0x30,
  0x2c, 0x31, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x76,
  0x65, 0x63, 0x34, 0x20, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6c,
  0x6f, 0x72, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x2f, 0x2f, 0x66, 0x69,
  0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x28,
  0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x33, 0x44, 0x28, 0x6d, 0x79,
  0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75,
  0x72, 0x65, 0x2c, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x5f,
  0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x2b, 0x58,
  0x29, 0x2b, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x33, 0x44, 0x28,
  0x6d, 0x79, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x74, 0x65, 0x78,
  0x74, 0x75, 0x72, 0x65, 0x2d, 0x58, 0x2c, 0x20, 0x74, 0x65, 0x78, 0x74,
  0x75, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61,
  0x74, 0x65, 0x29, 0x29, 0x2a, 0x30, 0x2e, 0x35, 0x0a, 0x20, 0x20, 0x20,
  0x20, 0x2f, 0x2f, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2b,
  0x28, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x33, 0x44, 0x28, 0x6d,
  0x79, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x74, 0x65, 0x78, 0x74,
  0x75, 0x72, 0x65, 0x2c, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65,
  0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x2b,
  0x59, 0x29, 0x2b, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x33, 0x44,
  0x28, 0x6d, 0x79, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x74, 0x65,
  0x78, 0x74, 0x75, 0x72, 0x65, 0x2d, 0x59, 0x2c, 0x20, 0x74, 0x65, 0x78,
  0x74, 0x75, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e,
  0x61, 0x74, 0x65, 0x29, 0x29, 0x2a, 0x30, 0x2e, 0x35, 0x0a, 0x20, 0x20,
  0x20, 0x20, 0x2f, 0x2f, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
  0x2b, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x33, 0x44, 0x28,
  0x6d, 0x79, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x74, 0x65, 0x78,
  0x74, 0x75, 0x72, 0x65, 0x2c, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72,
  0x65, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65,
  0x2b, 0x5a, 0x29, 0x2b, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x33,
  0x44, 0x28, 0x6d, 0x79, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x74,
  0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x2d, 0x5a, 0x2c, 0x20, 0x74, 0x65,
  0x78, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69,
  0x6e, 0x61, 0x74, 0x65, 0x29, 0x29, 0x2a, 0x30, 0x2e, 0x35, 0x3b, 0x0a,
  0x20, 0x20, 0x20, 0x20, 0x69, 0x66, 0x20, 0x28, 0x20, 0x74, 0x65, 0x78,
  0x74, 0x75, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e,
  0x61, 0x74, 0x65, 0x2e, 0x78, 0x20, 0x3c, 0x3d, 0x30, 0x2e, 0x30, 0x20,
  0x7c, 0x7c, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x63,
  0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x2e, 0x78, 0x20,
  0x3e, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x7c, 0x7c, 0x20, 0x74, 0x65,
  0x78, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69,
  0x6e, 0x61, 0x74, 0x65, 0x2e, 0x7a, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e,
  0x30, 0x20, 0x7c, 0x7c, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65,
  0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x2e,
  0x7a, 0x20, 0x3e, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x29, 0x0a, 0x20,
  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x67, 0x6c, 0x5f, 0x46, 0x72,
  0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x76, 0x65, 0x63,
  0x34, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x30, 0x2e, 0x30, 0x2c, 0x30, 0x2e,
  0x30, 0x2c, 0x31, 0x2e, 0x30, 0x29, 0x3b, 0x20, 0x2f, 0x2f, 0x43, 0x61,
  0x6e, 0x20, 0x62, 0x65, 0x20, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d,
  0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x63, 0x6f, 0x6c,
  0x6f, 0x72, 0x20, 0x61, 0x67, 0x61, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65,
  0x20, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x65,
  0x6c, 0x73, 0x65, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
  0x67, 0x6c, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
  0x20, 0x3d, 0x20, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x43, 0x6f,
  0x6c, 0x6f, 0x72, 0x2a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x33,
  0x44, 0x28, 0x6d, 0x79, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x74,
  0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x2c, 0x20, 0x74, 0x65, 0x78, 0x74,
  0x75, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61,
  0x74, 0x65, 0x29, 0x3b, 0x0a, 0x7d, 0x0a
};
unsigned int src_Texture3DShader_frag_len = 967;
